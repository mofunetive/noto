model buckets {
   id                         String                       @id
   name                       String                       @unique(map: "bname")
   owner                      String?                      @db.Uuid
   created_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
   updated_at                 DateTime?                    @default(now()) @db.Timestamptz(6)
   public                     Boolean?                     @default(false)
   avif_autodetection         Boolean?                     @default(false)
   file_size_limit            BigInt?
   allowed_mime_types         String[]
   owner_id                   String?
   objects                    objects[]
   s3_multipart_uploads       s3_multipart_uploads[]
   s3_multipart_uploads_parts s3_multipart_uploads_parts[]

   @@schema("storage")
}

model migrations {
   id          Int       @id
   name        String    @unique @db.VarChar(100)
   hash        String    @db.VarChar(40)
   executed_at DateTime? @default(now()) @db.Timestamp(6)

   @@schema("storage")
}

model objects {
   id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   bucket_id        String?
   name             String?
   owner            String?   @db.Uuid
   created_at       DateTime? @default(now()) @db.Timestamptz(6)
   updated_at       DateTime? @default(now()) @db.Timestamptz(6)
   last_accessed_at DateTime? @default(now()) @db.Timestamptz(6)
   metadata         Json?
   path_tokens      String[]  @default(dbgenerated("string_to_array(name, '/'::text)"))
   version          String?
   owner_id         String?
   user_metadata    Json?
   buckets          buckets?  @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "objects_bucketId_fkey")

   @@unique([bucket_id, name], map: "bucketid_objname")
   @@index([bucket_id, name], map: "idx_objects_bucket_id_name")
   @@index([name], map: "name_prefix_search")
   @@schema("storage")
}

model s3_multipart_uploads {
   id                         String                       @id
   in_progress_size           BigInt                       @default(0)
   upload_signature           String
   bucket_id                  String
   key                        String
   version                    String
   owner_id                   String?
   created_at                 DateTime                     @default(now()) @db.Timestamptz(6)
   user_metadata              Json?
   buckets                    buckets                      @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   s3_multipart_uploads_parts s3_multipart_uploads_parts[]

   @@index([bucket_id, key, created_at], map: "idx_multipart_uploads_list")
   @@schema("storage")
}

model s3_multipart_uploads_parts {
   id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   upload_id            String
   size                 BigInt               @default(0)
   part_number          Int
   bucket_id            String
   key                  String
   etag                 String
   owner_id             String?
   version              String
   created_at           DateTime             @default(now()) @db.Timestamptz(6)
   buckets              buckets              @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
   s3_multipart_uploads s3_multipart_uploads @relation(fields: [upload_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

   @@schema("storage")
}
